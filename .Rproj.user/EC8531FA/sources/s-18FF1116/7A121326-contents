---
title: "Opportunity Zones: Atlanta"
resource_files:
- acs_ga_tracts.shx
- acs_ga_tracts.prj
- acs_ga_tracts.dbf
- acs_oz_gaONLY.prj
- acs_oz_gaONLY.dbf
- acs_oz_gaONLY.shx
runtime: shiny
output:
  flexdashboard::flex_dashboard:
    orientation: columns
    social: menu
    theme: readable
    vertical_layout: fill
---

```{r setup, include=FALSE}
################ LIBRARIES ################

library(flexdashboard)
library(leaflet)
library(tmap)
library(sf)
library(highcharter)
library(shiny)
library(tidyverse)
library(geojsonio)

################ DATASETS ################
# Many of the datasets have been created using datasets/acs_data_scripts.R 
# The following datasets are subsets, selecting only data from Atlanta

# Load ACS track data from Atlanta
acs_ga_df <- read_sf("acs_ga_tracts.shp")

# Load joint dataset of ACS + OZ zones Atlanta only 
# This dataset was created in the datasets/acs_data_scripts.R file 
# The code can be found under the section  "Subset only the Georgia ACS tracts along with OZ" 
acs_oz_df <- read_sf("acs_oz_gaONLY.shp")

# Extract the covariates in the shapefile
var_names <- unique(acs_oz_df$names)

# Modify combined dataset to load into maps
acs_oz_modified <- acs_oz_df %>% 
  select(-variable, -moe) %>%
  spread(names, estimate) %>%
  mutate(`Percent of people under poverty` = round((`People below poverty level`/`Number of people whose poverty was determined`) * 100, 2)) %>%
  gather(var_names,
         key = "variable",
         value = "estimate") %>%
  group_by(NAME, variable, acs_year) %>%
  top_n(1) %>% ungroup() %>%
  st_transform(crs = 4326)

# Remove those rows of data that are zero
acs_oz_modified <- acs_oz_modified %>%
  filter(estimate != 0) %>%
  filter(!is.nan(estimate)) %>%
  mutate(race = ifelse(grepl("Asian", variable), "Asian",
    ifelse(grepl("Black", variable), "Black",
      ifelse(grepl("Hispanic", variable), "Hispanic",
             ifelse(grepl("White", variable), "White", NA))
    )
  ))

acs_oz_race <- acs_oz_modified %>%
  filter(!is.na(race)) %>%
  filter(grepl("inflation adjusted dollars", variable)) %>% # Choose only one variable to display in the meantime
  select(GEOID, race, estimate, acs_year, NAME) %>%
  data.frame() %>%
  spread(race, estimate)

# Expand grid of acs_oz_race so there is an available row per census tract
acs_years <- unique(acs_oz_race$acs_year)
acs_tracts <- unique(acs_oz_race$NAME)

acs_oz_race_exp <- expand.grid(acs_years = acs_years, acs_tracts = acs_tracts) %>%
  left_join(acs_oz_race, by = c("acs_years" = "acs_year",
                                "acs_tracts" = "NAME"))


################ STYLE ################

# Color and style 
rf_dark_blue <- "#00008b"
rf_light_blue <- "#b3caf9"
rf_coral <- "#ff7256"
rf_light_coral <- "#ffb499"
rf_white_coral <- "#ffe1d6"
rf_green <- "#53b6c1"
rf_light_green <- "#a9d3d8"
rf_yellow <- "#d6b22f"
rf_light_yellow <- "#fce27c"
rf_dark_grey <- "#666666"
rf_light_grey <- "#B3B3B3"

# Function for color vector
# You can specify the length of the vector using col_shading(5) to get a vector between 2 color if length 5. 
col_shading <- colorRampPalette(c(rf_coral, rf_dark_blue))

```




Atlanta
====================================================================== 

Column {data-width=650, data-height = 200}
-----------------------------------------------------------------------

### Chart A


```{r}

# List of variables to select from 
variables <- unique(acs_oz_modified$variable)
# Box plot function

# UI function
boxplotsUI <- function(id) {
  ns <- NS(id)
  fillCol(
    height = 600,
    flex = c(NA, 1),
    inputPanel(
      selectInput(ns("variable"), "Variables:", choices = variables)
    ),
    plotOutput(ns("plot"), height = "100%")
  )
}

# Server function
boxplots <- function(input, output, session) {
  output$plot <- renderPlot({
    acs_oz_modified %>%
      select(oz_area, variable, estimate, acs_year) %>%
      filter(acs_year == "2013-2017") %>%
      filter(variable == input$variable) %>%
      ggplot() +
      geom_boxplot(aes(x = factor(oz_area), y = estimate, color = factor(oz_area))) +
      theme_minimal() +
      theme(
        panel.grid.major.y = element_line(colour = rf_light_grey, size = 0.4),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.line.x.bottom = element_line(size = 1.5),
        axis.text = element_text(family = "Courier", colour = rf_dark_grey, size = (13)),
        axis.title = element_text(family = "Courier", colour = rf_dark_grey, size = (10)),
        strip.text = element_text(family = "Courier", colour = rf_dark_grey, size = (9)),
        legend.position = "none",
        panel.spacing = unit(5, "lines"),
        title = element_text(family = "Courier", colour = rf_dark_grey, size = (11))
      ) +
      labs(
        x = "",
        y = "",
        title = ,
        subtitle = ""
      ) +
      scale_color_manual(values = c(rf_coral, rf_dark_blue)) +
      scale_x_discrete(label = c("OZ area", "Non-OZ area")) + 
      coord_flip()
  })
}
```


```{r}
# Include the module
boxplotsUI("variable")
callModule(boxplots, "variable")
```


### Chart B

```{r}

# Box plot function

# UI function
boxplotsUI_2 <- function(id) {
  ns <- NS(id)
  fillCol(
    height = 600,
    flex = c(NA, 1),
    inputPanel(
      selectInput(ns("variable"), "Variables:", choices = variables)
    ),
    plotOutput(ns("plot_2"), height = "100%")
  )
}

# Server function
boxplots_2 <- function(input, output, session) {
  
  output$plot_2 <- renderPlot({
    acs_oz_modified %>%
      select(oz_area, variable, estimate, acs_year) %>%
      filter(variable == input$variable & acs_year == "2013-2017") %>%
      ggplot() +
      geom_boxplot(aes(x = factor(oz_area), y = estimate, color = factor(oz_area))) +
      theme_minimal() +
      theme(
        panel.grid.major.y = element_line(colour = rf_light_grey, size = 0.4),
        panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.line.x.bottom = element_line(size = 1.5),
        axis.text = element_text(family = "Courier", colour = rf_dark_grey, size = (13)),
        axis.title = element_text(family = "Courier", colour = rf_dark_grey, size = (10)),
        strip.text = element_text(family = "Courier", colour = rf_dark_grey, size = (9)),
        legend.position = "none",
        panel.spacing = unit(5, "lines"),
        title = element_text(family = "Courier", colour = rf_dark_grey, size = (11))
      ) +
      labs(
        x = "",
        y = "",
        title = ,
        subtitle = ""
      ) +
      scale_color_manual(values = c(rf_coral, rf_dark_blue)) +
      scale_x_discrete(label = c("OZ area", "Non-OZ area")) + 
      coord_flip()
  })
}
```


```{r}
# Include the module
boxplotsUI_2("variable_2")
callModule(boxplots_2, "variable_2") 
```


Column {data-width=450}
-----------------------------------------------------------------------

### Chart C

```{r Income per ethnicity}

# Vector with choices for tract selection
ga_tracts <- acs_oz_race %>%
  filter(grepl("Georgia", NAME)) %>%
  data.frame() %>%
  select(NAME) %>%
  pull(var = NAME)

# UI function
plotsUI_3 <- function(id) {
  ns <- NS(id)
  fillCol(
    height = 600,
    flex = c(NA, 1),
    inputPanel(
      selectInput(ns("acs_tracts"), "Tract:", choices = ga_tracts)
    ),
    highchartOutput(ns("raceplot"), height = "100%")
  )
}


# Server function
seriesplot <- function(input, output, session) {
  
  output$raceplot <- renderHighchart({
    chart <- highchart() %>%
      hc_xAxis(categories = acs_oz_race_exp$acs_years[acs_oz_race_exp$acs_tracts == input$acs_tracts]) %>%
      hc_add_series(name = "Black", data = acs_oz_race$Black[acs_oz_race_exp$acs_tracts == input$acs_tracts], color = rf_yellow) %>%
      hc_add_series(name = "Hispanic", data = acs_oz_race$Hispanic[acs_oz_race_exp$acs_tracts == input$acs_tracts], color = rf_light_blue) %>%
      hc_add_series(name = "White", data = acs_oz_race$White[acs_oz_race_exp$acs_tracts == input$acs_tracts], color = rf_green)


    chart
  })
}


# highchart() %>%
#       hc_xAxis(categories = acs_oz_race_exp$acs_years[acs_oz_race_exp$acs_tracts == "Census Tract 1, Clarke County, Georgia"]) %>%
#       hc_add_series(name = "Black", data = acs_oz_race$Black[acs_oz_race_exp$acs_tracts == "Census Tract 1, Clarke County, Georgia"], color = rf_yellow) %>%
#       hc_add_series(name = "Hispanic", data = acs_oz_race$Hispanic[acs_oz_race_exp$acs_tracts == "Census Tract 1, Clarke County, Georgia"], color = rf_light_blue) %>%
#       hc_add_series(name = "White", data = acs_oz_race$White[acs_oz_race_exp$acs_tracts == "Census Tract 1, Clarke County, Georgia"], color = rf_green)


```

```{r}
# Include the module
plotsUI_3("variable_3")
callModule(seriesplot, "variable_3") 
```

### Chart D

```{r, eval = F}

map_labels_ga <- sprintf(
  "<strong>%s</strong><br/>%s",
  gsub("(.*),.*", "\\1",acs_oz_modified$NAME[grepl("Georgia", acs_oz_modified$NAME)]), # Name of the tract
  gsub(".*, ", "", acs_oz_modified$NAME[grepl("Georgia", acs_oz_modified$NAME)]) # Name of the state
) %>% lapply(htmltools::HTML)

# Draw the map of income in Metro Area
output$map <- renderLeaflet({

  # Color
  pal <- pal <- colorFactor(palette = col_shading(2), NULL)

  map <- leaflet(acs_oz_modified %>%
    filter(grepl("Georgia", NAME))) %>%
    addProviderTiles("CartoDB.Positron") %>%
    addPolygons(
      stroke = TRUE,
      smoothFactor = 0,
      layerId = ~GEOID,
      fillColor = ~ pal(oz_area),
      fillOpacity = 0.8,
      weight = 0.2,
      color = "white",
      highlight = highlightOptions(
        weight = 4,
        color = rf_dark_grey,
        fillOpacity = 0.5,
        bringToFront = TRUE
      ),
      label = map_labels_ga,
      labelOptions = labelOptions(
        style = list("font-weight" = "normal", padding = "3px 8px"),
        textsize = "15px",
        direction = "auto"
      )
    ) %>%
    setView(
      lng = -84,
      lat = 33.8,
      zoom = 8
    ) %>%
    addLegend(labels = c("Non-OZ", "OZ"),
              colors = c(rf_coral, rf_dark_blue),
              position = "bottomright",
              title = NULL)
})


leafletOutput("map")

```


```{r, eval = F}

# Draw the map of income in Metro Area
output$map <- renderLeaflet({
  tm_shape(acs_oz_modified) +
    tm_fill(
      col = "oz_area",
      style = "cat",
      title = "OZ Zones",
      labels = c("Non-OZ", "OZ"),
      palette = c(rf_coral, rf_dark_blue),
      alpha = 0.7,
      id = "NAME"
      # popup.vars = c("Track Name:" = "NAME")
    ) +
    tm_borders(col = rf_light_grey, lwd = 0.2) -> map
  tmap_leaflet(map)
})

leafletOutput("map")
```


```{r}
tm_shape(acs_oz_modified) +
  tm_fill(col = "oz_area",
              palette = c(rf_coral, rf_dark_blue),
          labels = c("Non-OZ", "OZ"),
          n = 2) +
  tm_borders(col = "white",
             lwd = 0.3) +
  tm_layout(frame = FALSE)
```


